/*
 * HmSplitTextFileByRegex v1.0.6.1
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

// これを「秀丸マクロの層」で入れて表示だけでもしておかないと、JSからキックしたら１秒ほど遅くなってしまう。
// NeedConfirm(=マクロ引数が無い)である時だけ出す。ここで記述したくはないがあまりにも速度が違うので仕方がない。
if (filename2 != "" && getarg(0) == "") {
    renderpanecommand
    """"""""""""""""""""""""""""""""""""""""
    {
        "target": "HmSplitTextFileByRegex",
        "show": 1,
    }
    """""""""""""""""""""""""""""""""""""""";
}

jsmode "WebView2";
js {

if (typeof (objHmSplitTextFileByRegexHelpUI) != "undefined") {
    objHmSplitTextFileByRegexHelpUI._destructor();
}
class HmSplitTextFileByRegexHelpUI {
    static currentmacrodir = currentmacrodirectory();
    // ラベルはこのマクロ独自にしておく
    static strTargetLabel = "HmSplitTextFileByRegex";
    constructor() {
        HmSplitTextFileByRegexHelpUI.throwIfNotFileName();
        HmSplitTextFileByRegexHelpUI.openRenderPane();
        HmSplitTextFileByRegexHelpUI.setItitializeInterval();
    }
    _destructor() {
        HmSplitTextFileByRegexHelpUI.clearInitializeInterval();
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static throwIfNotFileName() {
        // ファイル名無しは対象にしない
        if (!hidemaru.getFileFullPath()) {
            HmSplitTextFileByRegexHelpUI.outputAlert("ファイル名が付いているファイルのみ対象とします。");
            HmSplitTextFileByRegexHelpUI.throwCancelException();
        }
    }
    static throwCancelException() {
        throw "実行をキャンセルしました。";
    }
    // レンダリングペインを開く
    static openRenderPane() {
        // カレントマクロフォルダのhtmlファイルを使う
        const absoluteUrl = new URL(HmSplitTextFileByRegexHelpUI.currentmacrodir + "\\" + "HmSplitTextFileByRegex.help.html").href;
        const json_arg = {
            target: HmSplitTextFileByRegexHelpUI.strTargetLabel,
            uri: absoluteUrl,
            show: 1,
            place: "leftside",
        };
        renderpanecommand(json_arg);
    }
    // 本当にレンダリングペインが開いて準備がととのったのかのチェック
    static tickCheckComplete() {
        let readyState = renderpanecommand({ target: HmSplitTextFileByRegexHelpUI.strTargetLabel, get: "readyState" });
        if (readyState == "complete") {
            HmSplitTextFileByRegexHelpUI.clearInitializeInterval();
            hidemaru.postExecMacroFile(HmSplitTextFileByRegexHelpUI.currentmacrodir + "\\" + "HmSplitTextFileByRegex.prev.mac");
        }
    }
    static idIntervalInitialize;
    static idIntervalUpdate;
    static setItitializeInterval() {
        // 最初のレンダリングペインCompleteチェック用のものは、比較的細やかにチェックする。
        HmSplitTextFileByRegexHelpUI.idIntervalInitialize = hidemaru.setInterval(HmSplitTextFileByRegexHelpUI.tickCheckComplete, 300);
    }
    static clearInitializeInterval() {
        if (typeof (HmSplitTextFileByRegexHelpUI.idIntervalInitialize) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileByRegexHelpUI.idIntervalInitialize);
        }
    }
}
try {
    var objHmSplitTextFileByRegexHelpUI = new HmSplitTextFileByRegexHelpUI();
}
catch (err) {
    HmSplitTextFileByRegexHelpUI.outputAlert(err);
    if (typeof (objHmSplitTextFileByRegexHelpUI) != "undefined") {
        objHmSplitTextFileByRegexHelpUI._destructor();
    }
}

} // js

