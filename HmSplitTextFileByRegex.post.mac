/*
 * HmSplitTextFileByRegex v1.0.5.2
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

jsmode "WebView2";
js {


// postExecされるべき関数はグローバルに展開しておかないと見えなくなってしまうことがあるようだ。
function postProcedure_HmSplitTextFileByRegex(nDivideType) {

    function getFilePathInfo(filePath) {

        // '.' でファイル名を拡張子とそれ以外に分割して配列に格納
        let parts = filePath.split('.');

        // 拡張子とそれ以外を別々の変数に格納
        let ext = parts.pop(); // 拡張子
        let name = parts.join('.'); // 拡張子以外の部分

        return {
            name: name,
            ext: ext
        };
    }

    function outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }

    function throwIfNotFileName() {
        // ファイル名無しは対象にしない
        if (!hidemaru.getFileFullPath()) {
            outputAlert("ファイル名が付いているファイルのみ対象とします。");
            throwCancelException();
        }
    }

    function throwInvalidDivideType() {
        // 情報は取得したので検索マーカー全て消す。
        deletecolormarkerall(findmarker());
        throw "指定の分割方法は適切な数値ではありません。"
    }

    function throwCancelException() {
        // 情報は取得したので検索マーカー全て消す。
        deletecolormarkerall(findmarker());
        throw "実行をキャンセルしました。";
    }


    function splitText(items, nDivideType) {
        let chunks = [];

        let bottom_len = linelen_wcs(linecount2() - 1);
        let prevCol = 0;
        let prevLine = 1;

        // タイプ①＝splitタイプであれば、間の文字列部分は採用しないのだから、(col1,line1)までを採用し、次は(col2, line2)となる。
        if (nDivideType == 1) {

            for (let item of items) {
                let text = gettext_wcs(prevCol, prevLine, item.col1, item.line1, 1);

                chunks.push(text);

                prevCol = item.col2;
                prevLine = item.line2;
            }
            let text = gettext_wcs(prevCol, prevLine, bottom_len + 1, linecount2() + 1, 1);
            chunks.push(text);
        }

        // ワード登場が新たなファイルとなるタイプ②なのであれば、(col1,line1)までを採用し、次は(col1, line1)からとなる。
        else if (nDivideType == 2) {

            for (let item of items) {
                let text = gettext_wcs(prevCol, prevLine, item.col1, item.line1, 1);

                chunks.push(text);

                prevCol = item.col1;
                prevLine = item.line1;
            }
            let text = gettext_wcs(prevCol, prevLine, bottom_len + 1, linecount2() + 1, 1);
            chunks.push(text);
        }

        // ワード登場するまでが前のファイルとなるタイプ③なのであれば、(col2,line2)までを採用し、次は(col2, line2)からとなる。
        else if (nDivideType == 3) {
            for (let item of items) {

                let text = gettext_wcs(prevCol, prevLine, item.col2, item.line2, 1);

                chunks.push(text);

                prevCol = item.col2
                prevLine = item.line2
            }
            let text = gettext_wcs(prevCol, prevLine, bottom_len + 1, linecount2() + 1, 1);
            chunks.push(text);
        }


        // chunksの最後の要素が""になってしまっていたら、それは連番ファイルとして保存しても無意味なので、カット
        if (chunks.length >= 2) {
            if (chunks[chunks.length-1] === "") {
                chunks.pop();
            }
        }
        // chunksの先頭要素が""なら、それは連番ファイルとして保存しても無意味なので、カット
        if (chunks.length >= 2) {
            if (chunks[0] === "") {
                chunks.shift();
            }
        }

        return chunks;
    }

    function saveChunksToFiles(chunks) {

        let cp = codepage();
        let hasbom = bom();

        function getTargetEncode() {
            switch (cp) {
                case 932: return "sjis";
                case 1200: return "utf16";
                case 65001: return hasbom ? "utf8bom" : "utf8";
            }

            return "utf8";
        }

        let fname = hidemaru.getFileFullPath();
        let enc = getTargetEncode();

        let maxFormatLength = chunks.length.toString().length;

        for (let i = 0; i < chunks.length; i++) {
            let pathAttr = getFilePathInfo(fname);
            // 配列の個数を文字列化したその文字列の長さに足りない部分を0埋めすればよい。
            // 配列の個数が30個なら、"30"という文字列の長さ、すなわち2文字。
            // 現在の数値が3なら3を文字列化して足りない文字数すなわち1つが0で埋まる
            const zeroFormatNumber = (i + 1).toString().padStart(maxFormatLength, '0');

            // ファイル名を新たに分割したファイル名に
            let newFileName = `${pathAttr.name}_${zeroFormatNumber}.${pathAttr.ext}`;
            hidemaru.saveTextFile(newFileName, chunks[i], enc);
        }
    }

    try {

        // テキストを分割して配列に格納
        const chunks = splitText(gColorMarkerItems, nDivideType);

        // 分割したテキストを分割してファイルに保存
        saveChunksToFiles(chunks);
        // console.log(chunks.join("\r\n---------\r\n"));

        // 情報は取得したので検索マーカー全て消す。
        deletecolormarkerall(findmarker());
        outputAlert(chunks.length + "個のファイルに分割しました。");
    } catch (err) {
        // 情報は取得したので検索マーカー全て消す。
        deletecolormarkerall(findmarker());
        outputAlert(err);
    }
}


let nDivideType = getarg(0);
postProcedure_HmSplitTextFileByRegex(nDivideType);

} //js