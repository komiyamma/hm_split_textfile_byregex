/*
 * HmSplitTextFileByRegex v1.0.7.1
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

jsmode "WebView2\\HmSplitTextFileByRegex";

js {

objHmSplitTextFileByRegexDivideUI?._destructor();
class HmSplitTextFileByRegexDivideUI {
    // ラベルはこのマクロ独自にしておく
    static strTargetLabel = "HmSplitTextFileByRegex";
    static currentmacrodir = currentmacrodirectory();
    constructor() {
        HmSplitTextFileByRegexDivideUI.openRenderPane();
        HmSplitTextFileByRegexDivideUI.setInitializeInterval();
        HmSplitTextFileByRegexDivideUI.setUpdateInterval();
    }
    _destructor() {
        HmSplitTextFileByRegexDivideUI.clearInitializeInterval();
        HmSplitTextFileByRegexDivideUI.clearUpdateInterval();
    }
    static clearResource() {
        HmSplitTextFileByRegexDivideUI.closeRenderPane();
        HmSplitTextFileByRegexDivideUI.syncFuncDeleteColorMarker();
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static throwIfNotFileName() {
        // ファイル名無しは対象にしない
        if (!hidemaru.getFileFullPath()) {
            HmSplitTextFileByRegexDivideUI.outputAlert("ファイル名が付いているファイルのみ対象とします。");
            HmSplitTextFileByRegexDivideUI.throwCancelException();
        }
    }
    static throwInvalidDivideType() {
        throw "指定の分割方法は適切な数値ではありません。";
    }
    static throwCancelException() {
        throw "実行をキャンセルしました。";
    }
    static syncFuncDeleteColorMarker() {
        // 情報は取得したので検索マーカー全て消す。
        let peRetry = hidemaru.setInterval(()=>{
            let isScheduled = hidemaru.postExecMacroMemory("deletecolormarkerall findmarker") ?? 1;
            if (isScheduled) { hidemaru.clearInterval(peRetry); }
        }, 100);
    }
    static closeRenderPane() {
        renderpanecommand({
            target: HmSplitTextFileByRegexDivideUI.strTargetLabel,
            show: 0,
        });
    }
    // 概ねどのタイプを選んでもこの辺の数値になるんじぁね？ という数値
    static expectedFileCount(items) {
        let count = 0;
        let prevCol = 0;
        let prevLine = 1;
        for (let item of items) {
            // console.log(`${prevCol}, ${item.col1}, ${prevLine}, ${item.line1}\r\n`);
            // 今の項目の開始地点と、前の項目の最終地点が同じなら、それは空ファイル予定なのでカウントなし
            if (prevCol == item.col1 && prevLine == item.line1) {
                ;
            }
            else {
                count++;
            }
            prevCol = item.col2;
            prevLine = item.line2;
        }
        return count;
    }
    // HTML側で「ボタン」を押すと、これが呼ばれる
    static onHtmlButtonClick(json_text) {
        try {
            HmSplitTextFileByRegexDivideUI.clearInitializeInterval();
            HmSplitTextFileByRegexDivideUI.clearUpdateInterval();
            // レンダーペインコマンドを閉じる
            HmSplitTextFileByRegexDivideUI.closeRenderPane();
            // json_textの状態で、inputフィールドに入っているテキストが渡ってくるので、その数値を渡す
            let json_obj = JSON.parse(json_text);
            let divtype = json_obj.divtype;
            // console.log("divtype" + divtype);
            let peRetry = hidemaru.setInterval(()=>{
                let isScheduled = hidemaru.postExecMacroFile(HmSplitTextFileByRegexDivideUI.currentmacrodir + "\\" + "HmSplitTextFileByRegex.post.mac", divtype) ?? 1;
                if (isScheduled) { hidemaru.clearInterval(peRetry); }
            }, 100);
        }
        catch (err) {
            HmSplitTextFileByRegexDivideUI.outputAlert(err);
            HmSplitTextFileByRegexDivideUI.clearInitializeInterval();
            HmSplitTextFileByRegexDivideUI.clearUpdateInterval();
            HmSplitTextFileByRegexDivideUI.clearResource();
        }
    }
    // レンダリングペインを開く
    static openRenderPane() {
        let absoluteUrl = new URL(HmSplitTextFileByRegexDivideUI.currentmacrodir + "\\" + "HmSplitTextFileByRegex.divide.html");
        let nDivFileCount = HmSplitTextFileByRegexDivideUI.expectedFileCount(gColorMarkerItems_HmSplitTextFileByRegex); // 予測値に使うだけ。
        // カレントマクロフォルダのhtmlファイルを使う
        let idCallback = hidemaru.getFunctionId(HmSplitTextFileByRegexDivideUI.onHtmlButtonClick);
        let params = new URLSearchParams();
        params.set('strIDCallBack', String(idCallback));
        params.set('strDivFileCount', String(nDivFileCount));
        absoluteUrl.search = params.toString();
        let strUrl = absoluteUrl.href; // オブジェクトから実際のUrl文字列へ
        const json_arg = {
            target: HmSplitTextFileByRegexDivideUI.strTargetLabel,
            uri: strUrl,
            show: 1,
            place: "leftside",
            size: 240,
            initialize: "async",
        };
        renderpanecommand(json_arg);
    }
    // 本当にレンダリングペインが開いて準備がととのったのかのチェック
    static tickCheckComplete() {
        let readyState = renderpanecommand({ target: HmSplitTextFileByRegexDivideUI.strTargetLabel, get: "readyState" });
        if (readyState == "complete") {
            HmSplitTextFileByRegexDivideUI.clearInitializeInterval();
            HmSplitTextFileByRegexDivideUI.onRenderPaneShown();
        }
    }
    // レンダリングペインが完全に表示されたら、
    // このJS内にある「onInputHtmlButtonClick_HmSplitTextFileByRegex」関数をレンダリングペインから呼び出せるように関数のIDを渡す。
    // また、「レンダリングペインを操作するのよ～」ということがわかりやすいように、レンダリングペイン側にフォーカスを移す
    static onRenderPaneShown() {
        renderpanecommand({
            target: HmSplitTextFileByRegexDivideUI.strTargetLabel,
            focus: 1,
        });
    }
    // 途中で閉じちゃってたら、終了
    static tickCheckCloseRenderPane() {
        let isShowNow = renderpanecommand({ target: HmSplitTextFileByRegexDivideUI.strTargetLabel, get: "show" });
        if (isShowNow == "0") {
            HmSplitTextFileByRegexDivideUI.clearInitializeInterval();
            HmSplitTextFileByRegexDivideUI.clearUpdateInterval();
            HmSplitTextFileByRegexDivideUI.clearResource();
        }
    }
    static idIntervalInitialize;
    static idIntervalUpdate;
    static setInitializeInterval() {
        // 最初のレンダリングペインCompleteチェック用のものは、比較的細やかにチェックする。
        HmSplitTextFileByRegexDivideUI.idIntervalInitialize = hidemaru.setInterval(HmSplitTextFileByRegexDivideUI.tickCheckComplete, 300);
    }
    static clearInitializeInterval() {
        if (typeof (HmSplitTextFileByRegexDivideUI.idIntervalInitialize) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileByRegexDivideUI.idIntervalInitialize);
        }
    }
    static setUpdateInterval() {
        // 全体の行数の変化にはおおらかに対応する。
        HmSplitTextFileByRegexDivideUI.idIntervalUpdate = hidemaru.setInterval(HmSplitTextFileByRegexDivideUI.tickCheckCloseRenderPane, 1000);
    }
    static clearUpdateInterval() {
        if (typeof (HmSplitTextFileByRegexDivideUI.idIntervalUpdate) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileByRegexDivideUI.idIntervalUpdate);
        }
    }
}
try {
    var objHmSplitTextFileByRegexDivideUI = new HmSplitTextFileByRegexDivideUI();
}
catch (err) {
    HmSplitTextFileByRegexDivideUI.outputAlert(err);
    objHmSplitTextFileByRegexDivideUI?._destructor();
    HmSplitTextFileByRegexDivideUI.clearResource();
}


} // js